#!/usr/bin/python
import sys, os
from optparse import OptionParser

from easy_extract.archives.xtm import XtmArchive
from easy_extract.archives.default import DefaultArchive
from easy_extract.archive_finder import ArchiveFinder

# Patch for disabling extractions
def _fake_extract(cls):
      print str(cls)
      return True

XtmArchive._extract = _fake_extract
DefaultArchive._extract = _fake_extract

class EasyExtract(ArchiveFinder):
      """User interface for extracting archives"""

      def __init__(self, path, recursive=False,
                   force_extract=False, repair=True):
          self.force_extract = force_extract
          self.repair = repair
          self.archives_classes = [DefaultArchive, XtmArchive,]
          
          super(EasyExtract, self).__init__(path, recursive,
                                            self.archives_classes)

          if self.can_extract(self.force_extract):
              self.extract_archives(self.repair)
          else:
              print 'Nothing to do !'
              
      def get_path_archives(self, path, filenames, archive_classes):
            print 'Scanning %s' % os.path.abspath(path)
            archives = super(EasyExtract, self).get_path_archives(
                  path, filenames, archive_classes)
            if len(archives) == 1:
                  print '  - 1 archive found'
            elif len(archives) > 1:
                  print '  - %i archives founds'
            return archives

      def can_extract(self, force):
            if self.archives:
                  for archive in self.archives:
                        print archive
                  if force: return True
                  extract = raw_input('Extract all ? [Y]/n ')
                  return bool(not extract or 'y' in extract.lower())
            return False
              
      def extract_archives(self, repair):
          for archive in self.archives:
                result = archive.extract(repair)
                
          

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-d', '--directory', dest='directory',
                      help='Directory to where to find archives', default='.',
                      metavar='DIRECTORY')
    parser.add_option('-f', '--force', dest='force_extract', action='store_true',
                      help='Do not prompt confirmation message', default=False)
    parser.add_option('-n', '--not-repair', dest='repair', action='store_false',
                      help='Do not try to repair archives on errors', default=True)
    parser.add_option('-r', '--recursive', dest='recursive', action='store_true',
                      help='Find archives recursively', default=False)

    (options, args) = parser.parse_args()
    
    EasyExtract(options.directory, options.recursive,
                options.force_extract, options.repair)
